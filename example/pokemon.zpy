导入 os
导入 json
导入 time
从 copy 导入 deepcopy


函数 初始化():

    随着 打开("./example/pokemon.json") 作为 宝可梦:
        宝可梦数据 = 宝可梦.read()
        数据集 = json.loads(宝可梦数据)

    数据集.sort(key=匿名 此项: 此项["id"])

    返回 数据集


数据集 = 初始化()


函数 前样式_1(单词):
    返回 f'\033[31m{单词}\033[0m'


函数 前样式_2(单词):
    返回 f'\033[32m{单词}\033[0m'


函数 前样式_3(单词):
    返回 f'\033[33m{单词}\033[0m'


函数 前样式_4(单词):
    返回 f'\033[34m{单词}\033[0m'


函数 前样式_6(单词):
    返回 f'\033[36m{单词}\033[0m'


函数 后样式_1(单词):
    返回 f'\033[41m{单词}\033[0m'


函数 混合样式(单词):
    返回 f'\033[5;34;46m{单词}\033[0m'


类 计时(对象):
    名字 = 空
    开始时间 = 空
    结束时间 = 空

    函数 __在it__(自己, 名字="计时"):
        自己.名字 = 名字
        自己.开始()

    函数 开始(自己):
        自己.打印开始()
        自己.开始时间 = time.time()

    函数 结束(自己):
        自己.使用时间 = time.time() - 自己.开始时间
        自己.打印结束()
        自己 = 空

    函数 打印开始(自己):
        打印(前样式_4("{} 开始计时").格式化(自己.名字))

    函数 打印结束(自己):

        打印(前样式_6('{} 完成 ').格式化(自己.名字) +
              前样式_2(' {:.10f}s'.格式化(自己.使用时间)))


函数 分割线(名字):
    打印(f'\n{混合样式(f"===== {名字} =====")}\n')


函数 显示(目标字典, 样式列表=[], 深度=0):

    对于 关键字 在 目标字典:
        如果 样式列表 == [] 或 关键字 在 样式列表 或 深度 != 0:
            如果 类型(目标字典[关键字]) == 字典:
                打印(
                    f'{" "*2*深度}{后样式_1(" ")} {前样式_4(关键字)} {前样式_1(":")}')
                显示(目标字典[关键字], 样式列表, 深度 + 1)
            否则:
                打印(
                    f'{" "*2*深度}{后样式_1(" ")} {前样式_4(关键字)} {前样式_1(":")} {前样式_3(目标字典[关键字])}')
    返回


函数 未找到(单词="没有找到"):
    打印("")
    打印(f'{后样式_1(" ")} {前样式_4(单词)}')
    打印("")


分割线("简单顺序查找")


函数 简单顺序查找(目标):
    查找计时 = 计时("简单顺序查找")
    对于 此项 在 数据集:
        如果 目标 == 此项["name"]["chinese"]:
            显示(此项)
            查找计时.结束()
            返回 此项
    否则:
        查找计时.结束()
        未找到()
        返回 错


简单顺序查找("路卡利欧")
